#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Small script to get the trim parameters for Latex
# Usage:
#    latex-trim [filename]
#
# License WTFPL
import sys
import io
import subprocess
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.widgets as widgets
from PIL import Image


filename = sys.argv[1]

# If pdf file, converting it with imagemagik to png
if filename.endswith(".pdf"):
    cmd = ["convert", filename, "-define", "png:color-type=6", "png:-"]
    fconvert = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    stdout, stderr = fconvert.communicate()
    assert fconvert.returncode == 0, stderr

#     im = Image.open(io.BytesIO(bytearray(stdout)))
    im = Image.open(io.BytesIO(stdout))
else:
    im = Image.open(filename)


arr = np.asarray(im)
width, height = im.size

if 'dpi' in im.info:
    dpi = im.info['dpi'][0]
else:
    # dpi not stored in image, revert to latex default: 72
    dpi = 72

def pixel2cm(px):
    return px * 2.54 / dpi

def onselect(eclick, erelease):
    rightPx = max(eclick.xdata, erelease.xdata)
    leftPx = min(eclick.xdata, erelease.xdata)
    topPx = min(eclick.ydata, erelease.ydata)
    bottomPx = max(eclick.ydata, erelease.ydata)
    print("trim={{{:.2f}cm {:.2f}cm {:.2f}cm {:.2f}cm}}, clip".format(pixel2cm(leftPx),
                                                                      pixel2cm(height-bottomPx),
                                                                      pixel2cm(width - rightPx),
                                                                      pixel2cm(topPx)))
    plt.close()


fig, ax = plt.subplots()
plt_image = plt.imshow(arr)

ax.set_ylim(height, 0)
ax.set_xlim(0, width)

rs = widgets.RectangleSelector(ax,
                               onselect,
                               drawtype='box',
                               rectprops = dict(facecolor='red', edgecolor = 'black', alpha=0.5, fill=True))
plt.tight_layout()
plt.show()

